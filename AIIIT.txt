功能包括：
1.使用AI出题（调用AI的API进行出题，题目包括选择、判断、填空、也可以包括主观题但是主观题需要再次调用AI判断得分），注意需要用户在我的页面自己配置自己的APIkey，调用自己的API，然后选择模型，选择题目的大方向（例如互联网）、小方向（例如后端）、详细（例如MySQL数据库）方面的题目，题目数量（例如30道），题目难度（例如困难），题目类别（例如选择题）等
2.出题完成后要保存题目数据到数据库，用户可以看到自己的出过的题目，可以选择公开（公开后每个人都可以看到，可以点进去做题），同时具有更正功能，用户可以反馈题目出错了然后提交错误经过审核后就对相关错误题目进行更正
3.具有基本的登录注册功能等
4.提供基本的AI聊天功能



####################################################################################################
####################################################################################################
####################################################################################################

AI 智能出题应用 - 完整API 文档
基地址 (Base URL): http://your_domain.com/v1

通用约定:

认证: 所有需要认证的接口，必须在 HTTP 请求头中添加 Authorization 字段，格式为 Bearer YOUR_JWT_TOKEN。

成功响应: 成功的请求 code 字段为 0。

失败响应: 失败的请求 code 字段为非零值（通常与HTTP状态码一致），并附带 message 说明错误原因。

1. 用户认证与账户 (User Authentication & Account)
1.1 账户密码登录
功能描述: 用户使用用户名和密码登录，获取 Token。

HTTP: POST /auth/login

认证: 否

请求体 (Body):

JSON

{
  "username": "testuser",
  "password": "password123"
}
成功响应 (200 OK):

JSON

{
  "code": 0,
  "message": "登录成功",
  "data": {
    "token": "ey...",
    "expiresIn": 86400
  }
}
1.2 微信小程序登录
功能描述: 使用微信 code 进行登录或注册，获取 Token。

HTTP: POST /auth/wxLogin

认证: 否

请求体 (Body):

JSON

{
  "code": "WX_LOGIN_CODE_FROM_FRONTEND"
}
成功响应 (200 OK):

JSON

{
  "code": 0,
  "message": "微信登录成功",
  "data": {
    "token": "ey...",
    "isAccountSet": false // 是否已设置过用户名密码
  }
}
1.3 获取当前用户信息
功能描述: 获取当前登录用户的基本信息。

HTTP: GET /users/me

认证: 是

成功响应 (200 OK):

JSON

{
  "code": 0,
  "message": "Success",
  "data": {
    "userId": 1,
    "username": "testuser",
    "createdAt": "2025-09-01T12:00:00.000Z"
  }
}
1.4 (微信用户) 设置账户凭证
功能描述: 微信登录用户首次设置自己的用户名和密码。

HTTP: POST /users/me/set-credentials

认证: 是

请求体 (Body):

JSON

{
  "username": "new_username",
  "password": "new_password123"
}
成功响应 (200 OK):

JSON

{ "code": 0, "message": "账户凭证设置成功", "data": null }
2. AI 模型 Key 管理 (API Keys)
2.1 保存/更新 API Key
功能描述: 为指定的大模型提供商保存或更新用户的 API Key。

HTTP: PUT /keys

认证: 是

请求体 (Body):

JSON

{
  "provider": "OpenAI", // e.g., "OpenAI", "SiliconFlow", "Kimi"
  "apiKey": "sk-xxxxxxxx"
}
成功响应 (200 OK):

JSON

{ "code": 0, "message": "API Key 保存成功", "data": null }
2.2 获取已配置的提供商列表
功能描述: 获取当前用户已经配置过 API Key 的所有提供商名称。

HTTP: GET /keys

认证: 是

成功响应 (200 OK):

JSON

{
  "code": 0,
  "message": "Success",
  "data": {
    "providers": ["OpenAI", "SiliconFlow"]
  }
}
3. 题库管理 (Question Sets)
3.1 AI 异步生成题库
功能描述: 提交一个任务，让 AI 在后台生成一套题库。

HTTP: POST /question-sets/generate

认证: 是

请求体 (Body):

JSON

{
  "title": "我的前端面试题",
  "provider": "SiliconFlow",
  "model": "deepseek-ai/deepseek-v2-chat",
  "domain_major": "互联网",
  "domain_minor": "前端开发",
  "domain_detail": "React Hooks",
  "difficulty": "中等",
  "questionType": "multiple_choice",
  "quantity": 10
}
成功响应 (202 Accepted):

JSON

{
  "code": 0,
  "message": "题目生成任务已创建，请稍后查询结果",
  "data": { "setId": 123, "status": "processing" }
}
3.2 手动导入题库
功能描述: 用户通过标准JSON或自定义文本格式导入一套题库。

HTTP: POST /question-sets/import

认证: 是

请求体 (Body):

JSON

{
  "questionSetData": {
    "title": "我手动导入的题库",
    "provider": "ChatGPT", // 内容来源
    "model": "GPT-4o",    // 具体模型
    "isPublic": false,
    "domain_major": "互联网",
    "domain_minor": "后端开发",
    "domain_detail": "数据库",
    "difficulty": "困难",
    "questionType": "multiple_choice"
  },
  "importType": "json", // 或 "text"
  "questions": [/* ...题目对象数组... */] // 如果是 text, 这里是长字符串
}
成功响应 (201 Created):

JSON

{
  "code": 0,
  "message": "题库导入成功！",
  "data": { "setId": 124 }
}
3.3 获取公开题库列表
功能描述: 分页获取所有已发布的公开题库。

HTTP: GET /question-sets/public

认证: 否

查询参数 (Query):

page (可选, 数字, 默认 1)

limit (可选, 数字, 默认 10)

domain_major (可选, 字符串, 按领域筛选)

search (可选, 字符串, 按标题搜索)

成功响应 (200 OK):

JSON

{
  "code": 0, "message": "Success",
  "data": {
    "sets": [/* ...题库对象数组... */],
    "pagination": { "page": 1, "limit": 10, "total": 100 }
  }
}
3.4 获取我的题库列表
功能描述: 分页获取当前用户创建的所有题库（公开和私有）。

HTTP: GET /question-sets/my

认证: 是

查询参数 (Query): 同 3.3

成功响应 (200 OK): 结构同 3.3

3.5 获取指定题库详情
功能描述: 获取一个题库的详细信息，包含其下的所有题目。

HTTP: GET /question-sets/:setId

认证: 是

路径参数 (Path): setId (题库ID)

成功响应 (200 OK):

JSON

{
  "code": 0, "message": "Success",
  "data": { /* ...完整的题库对象，包含 questions 数组... */ }
}
3.6 更新题库信息
功能描述: 更新题库的标题或公开状态。设为公开发布时会触发微信内容安全审查。

HTTP: PUT /question-sets/:setId

认证: 是

路径参数 (Path): setId (题库ID)

请求体 (Body):

JSON

{
  "title": "更新后的标题",
  "isPublic": true // 或 false
}
成功响应 (200 OK): 返回更新后的题库对象。

失败响应 (400 Bad Request): 如果内容审查失败，message 中会包含提示。

4. 互动功能 (Interaction)
4.1 添加收藏
HTTP: POST /question-sets/:setId/favorite

认证: 是

路径参数 (Path): setId (题库ID)

成功响应 (201 Created): { "code": 0, "message": "收藏成功", "data": null }

4.2 取消收藏
HTTP: DELETE /question-sets/:setId/favorite

认证: 是

路径参数 (Path): setId (题库ID)

成功响应 (204 No Content): 无响应体。

4.3 获取我的收藏列表
HTTP: GET /question-sets/favorites

认证: 是

查询参数 (Query): page, limit

成功响应 (200 OK): 结构同 3.3

4.4 提交题库评分
HTTP: POST /question-sets/:setId/rate

认证: 是

路径参数 (Path): setId (题库ID)

请求体 (Body):

JSON

{
  "rating": 5 // 1-5的整数
}
成功响应 (200 OK): { "code": 0, "message": "评分成功！", "data": null }

5. 答题与错题本 (Quiz & Notebook)
5.1 提交答题结果
功能描述: 用户完成一次答题后，提交本次答错的题目。

HTTP: POST /quizzes/submit

认证: 是

请求体 (Body):

JSON

{
  "wrongAnswers": [
    { "questionId": 101, "userAnswer": "A" },
    { "questionId": 105, "userAnswer": "D" }
  ]
}
成功响应 (200 OK): { "code": 0, "message": "答题记录已成功保存", "data": null }

5.2 获取错题本列表
HTTP: GET /notebook/wrong-questions

认证: 是

查询参数 (Query): page, limit

成功响应 (200 OK): 返回分页的错题列表。

5.3 从错题本移除题目
HTTP: DELETE /notebook/wrong-questions/:questionId

认证: 是

路径参数 (Path): questionId (题目ID)

成功响应 (204 No Content): 无响应体。

6. 其他 (Miscellaneous)
6.1 获取支持的领域列表
HTTP: GET /domains/majors

认证: 否

成功响应 (200 OK): 返回一个包含所有专业领域名称的数组。

6.2 提交题目纠错
HTTP: POST /corrections

认证: 是

请求体 (Body):

JSON

{
  "questionId": 101,
  "suggestion": "我认为这道题的正确答案应该是B，因为..."
}
成功响应 (201 Created): { "code": 0, "message": "感谢您的反馈，我们将尽快审核！", "data": null }

6.3 与 AI 聊天 (流式)
功能描述: 与指定的大模型进行流式对话。

HTTP: POST /chat/completions

认证: 是

请求体 (Body):

JSON

{
  "provider": "SiliconFlow",
  "model": "deepseek-ai/deepseek-v2-chat",
  "messages": [
    { "role": "user", "content": "你好" }
  ]
}
响应: Content-Type: text/event-stream，SSE 流式响应。

7. 管理员后台 (Admin Panel)
注意: 所有管理员接口都需要管理员权限的 Token。

7.1 (用户管理) 更新用户发布权限
HTTP: PUT /admin/users/:userId/publication-status

请求体 (Body): { "canPublish": false }

7.2 (题库管理) 获取所有题库列表
HTTP: GET /admin/question-sets

查询参数 (Query): page, limit, isPublic (true/false), search

7.3 (题库管理) 更新题库公开状态
HTTP: PUT /admin/question-sets/:setId/public-status

请求体 (Body): { "isPublic": false }

7.4 (纠错管理) 获取纠错建议列表
HTTP: GET /admin/corrections

查询参数 (Query): status ('pending', 'approved', 'rejected'), page, limit

7.5 (纠错管理) 处理纠错建议
HTTP: PUT /admin/corrections/:correctionId

请求体 (Body): { "status": "approved", "updatedQuestion": { ... } } 或 { "status": "rejected" }