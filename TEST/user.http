### auth.http ###

# -- Variables --
# 定义环境变量，可以在不同的环境中切换 (例如 local, staging, prod)
@hostname = http://localhost:3000
@api_v1 = {{hostname}}/v1

# 使用 IDEA HTTP Client 的动态变量生成一个随机的用户名
@username = testuser{{$randomInt}}@example.com
@password = strongpassword123
@token = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJ0ZXN0dXNlcjQyQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJpYXQiOjE3NTY1MjMxNDAsImV4cCI6MTc1Njc4MjM0MH0.-tQKFcAfJdamZYDnJu-BF_hmIWsrFy2aLUWcVfX9ssA

### 1. 账户密码注册 (Register)
# @name registerRequest
POST {{api_v1}}/auth/register
Content-Type: application/json

{
    "username": "{{username}}",
    "password": "{{password}}"
}

### 分隔符 ###
### ---------------------------------------------------- ###


### 2. 账户密码登录 (Login)
# 使用上面注册时用的相同变量进行登录
POST {{api_v1}}/auth/login
Content-Type: application/json

{
    "username": "{{username}}",
    "password": "{{password}}"
}


### 分隔符 ###
### ---------------------------------------------------- ###


### 3. 微信登录 (wx-login)
#
# !!! 重要提示 !!!
# 下面的 "your_wx_code_here" 必须每次测试时都手动替换。
# 你需要从你的微信开发者工具的控制台中，通过 uni.login() API 来获取一个临时的 code。
# 这个 code 是一次性的，且只有5分钟有效期。
#

POST {{api_v1}}/auth/wx-login
Content-Type: application/json

{
  "code": "your_wx_code_here"
}

### 分隔符 ###
### ---------------------------------------------------- ###


### 4. 获取当前用户信息 (需要认证)
#
# 这个请求依赖于登录请求的成功执行。
# REST Client 插件会自动捕获上一个请求中返回的 token。
# @name getCurrentUser
# @token_variable access_token
GET {{api_v1}}/users/me
Authorization: Bearer {{token}}

### 分隔符 ###
### ---------------------------------------------------- ###


### 5. 保存/更新用户的 API Key (需要认证)
# 使用登录后获取的 token
PUT {{api_v1}}/keys
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "provider": "siliconcloud",
  "apiKey": "sk-XXXXXXXXXXXXXXXXXXXXXXXX"
}


### 分隔符 ###
### ---------------------------------------------------- ###


### 6. 获取用户已配置的 API Key 提供商列表 (需要认证)
# 使用登录后获取的 token
GET {{api_v1}}/keys
Authorization: Bearer {{token}}


### 分隔符 ###
### ---------------------------------------------------- ###


### 7. AI 生成一套题目 (需要认证)
#
# !! 重要 !!
# 1. 执行此请求前，必须先执行登录 (Login) 和保存API Key (Save API Key) 请求。
# 2. provider 和 model 的值需要与你保存的 API Key 以及该平台支持的模型相匹配。
#    例如，如果你使用的是硅基流动，provider可以是 "siliconflow"，model可以是 "deepseek-ai/deepseek-v2-chat"。
#
POST {{api_v1}}/question-sets/generate
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "title": "MySQL 数据库高级知识测评",
  "provider": "siliconflow",
  "model": "THUDM/GLM-4.1V-9B-Thinking",
  "domain_major": "互联网",
  "domain_minor": "后端",
  "domain_detail": "MySQL 数据库索引优化",
  "difficulty": "困难",
  "questionType": "true_false",
  "quantity": 5
}

### 分隔符 ###
### ---------------------------------------------------- ###


### 8. 查询指定题库的生成状态和结果
#
# 使用上一步 (AI 生成题目) 请求返回的 setId
# 你可能需要手动复制 setId 过来，或者如果你的客户端支持，可以使用变量
# @name getQuestionSet
GET {{api_v1}}/question-sets/6
Authorization: Bearer {{token}}

### 分隔符 ###
### ---------------------------------------------------- ###


### 9. 获取我的题库列表 (需要认证)
#
# 这个接口支持分页，你可以修改 URL 中的 page 和 limit 参数来测试
# 例如: /my?page=2&limit=5
#
GET {{api_v1}}/question-sets/my?page=1&limit=10
Authorization: Bearer {{token}}


### 分隔符 ###
### ---------------------------------------------------- ###


### 10. 获取公开的题库列表 (无需认证)
#
# 这个接口任何人都可以访问，不需要提供 token
#
GET {{api_v1}}/question-sets/public?page=1&limit=10

### 分隔符 ###
### ---------------------------------------------------- ###


### 11. 更新题库信息 (需要认证)
#
# !! 重要 !!
# 1. 先执行“获取我的题库列表”请求，从返回结果中找到一个你想修改的题库的 id。
# 2. 将下面 URL 中的 "your_set_id" 替换为那个 id。
#
PUT {{api_v1}}/question-sets/6
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "title": "MySQL 数据库高级知识测评",
  "isPublic": true
}


### 分隔符 ###
### ---------------------------------------------------- ###


### 12. 获取大方向分类
#
# 這個接口用於前端生成下拉菜單
#
GET {{api_v1}}/domains/majors

### 分隔符 ###
### ---------------------------------------------------- ###


### 13. 按分类筛选“我的”题库列表 (需要认证)
#
# 将 URL 中的 "互联" 替换为想筛选的、并且你已经创建过的题库分类
#
GET {{api_v1}}/question-sets/my?domain_major=医疗教育
Authorization: Bearer {{token}}


### 分隔符 ###
### ---------------------------------------------------- ###


### 14. 按分类筛选“公开”题库列表
GET {{api_v1}}/question-sets/public?domain_major=


### 分隔符 ###
### ---------------------------------------------------- ###

### 15. 收藏一个公开题库 (需要认证)
#
# 1. 先执行“获取公开题库列表”请求，从返回结果中找到一个你想收藏的题库的 id。
# 2. 将下面 URL 中的 "public_set_id" 替换为那个 id。
#
POST {{api_v1}}/question-sets/6/favorite
Authorization: Bearer {{token}}


### 分隔符 ###
### ---------------------------------------------------- ###


### 16. 取消收藏一个题库 (需要认证)
#
# 将下面 URL 中的 "public_set_id" 替换为上一步你收藏的那个 id。
#
DELETE {{api_v1}}/question-sets/6/favorite
Authorization: Bearer {{token}}

### 分隔符 ###
### ---------------------------------------------------- ###

### 17. 获取我的收藏题库列表 (需要认证)
#
# 这个接口支持分页
#
GET {{api_v1}}/question-sets/favorites?page=1&limit=10
Authorization: Bearer {{token}}

### 分隔符 ###
### ---------------------------------------------------- ###

### 18. 记录答题信息（更新错题本） (需要认证)
#
# !! 重要 !!
# 1. "questionId" 必须是 `questions` 表中真实存在的题目ID。
# 2. "userAnswer" 是用户提交的错误答案。
#
POST {{api_v1}}/quizzes/submit
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "wrongAnswers": [
    { "questionId": 1, "userAnswer": {"answer": "A"} },
    { "questionId": 3, "userAnswer": {"answer": "D"} }
  ]
}


### 分隔符 ###
### ---------------------------------------------------- ###

### 19. 获取我的错题本列表 (需要认证)
#
# 这个接口支持分页
#
GET {{api_v1}}/notebook/wrong-questions?page=1&limit=10
Authorization: Bearer {{token}}

### 分隔符 ###
### ---------------------------------------------------- ###

### 20. 从错题本中移除一道题 (需要认证)
#
# 1. 先执行“获取我的错题本列表”请求，从返回结果中找到一个你想删除的错题的 questionId。
# 2. 将下面 URL 中的 "your_question_id" 替换为那个 id。
#
DELETE {{api_v1}}/notebook/wrong-questions/1
Authorization: Bearer {{token}}